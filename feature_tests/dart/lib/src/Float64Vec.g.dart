// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class Float64Vec implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  Float64Vec._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_Float64Vec_destroy));

  factory Float64Vec(Float64List v) {
    final temp = ffi2.Arena();
    final vView = v;
    final result = _Float64Vec_new(vView.pointer(temp), vView.length);
    temp.releaseAll();
    return Float64Vec._(result);
  }

  void fillSlice(Float64List v) {
    final temp = ffi2.Arena();
    final vView = v;
    _Float64Vec_fill_slice(_underlying, vView.pointer(temp), vView.length);
    temp.releaseAll();
  }

  void setValue(Float64List newSlice) {
    final temp = ffi2.Arena();
    final newSliceView = newSlice;
    _Float64Vec_set_value(_underlying, newSliceView.pointer(temp), newSliceView.length);
    temp.releaseAll();
  }
}

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'Float64Vec_destroy')
// ignore: non_constant_identifier_names
external void _Float64Vec_destroy(ffi.Pointer<ffi.Void> self);

@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Double>, ffi.Size)>(isLeaf: true, symbol: 'Float64Vec_new')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _Float64Vec_new(ffi.Pointer<ffi.Double> vData, int vLength);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Double>, ffi.Size)>(isLeaf: true, symbol: 'Float64Vec_fill_slice')
// ignore: non_constant_identifier_names
external void _Float64Vec_fill_slice(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Double> vData, int vLength);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Double>, ffi.Size)>(isLeaf: true, symbol: 'Float64Vec_set_value')
// ignore: non_constant_identifier_names
external void _Float64Vec_set_value(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Double> newSliceData, int newSliceLength);
